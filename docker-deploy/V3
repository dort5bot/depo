name: 🐳 Docker Build & Deploy (Controlled v3)
#v3 test+manuel bulding
#
##
on:
  # Push → sadece test job'u çalışır
  push:
    branches: [main, master]

  # Manuel tetikleme (Deploy butonu)
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: ${{ github.event.repository.name }}-${{ github.ref_name }}
  RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
  ORACLE_SSH_KEY: ${{ secrets.ORACLE_SSH_KEY }}
  ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
  ORACLE_USER: ${{ secrets.ORACLE_USER }}
  HETZNER_SSH_KEY: ${{ secrets.HETZNER_SSH_KEY }}
  HETZNER_HOST: ${{ secrets.HETZNER_HOST }}
  HETZNER_USER: ${{ secrets.HETZNER_USER }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

      - name: Run Dummy Pytest
        run: |
          echo "🧪 Basit test çalıştırılıyor..."
          mkdir -p tests
          echo "def test_dummy(): assert 1 + 1 == 2" > tests/test_dummy.py
          pip install pytest
          pytest tests/
          echo "✅ Dummy test başarılı!"

  deploy-oracle:
    # Oracle deploy job, manuel tetikleme ile çalışır
    if: github.event_name == 'workflow_dispatch'
    needs: build-test
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Display deployment info
        run: |
          echo "🚀 Manual Deployment Başlıyor..."
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🐳 Container: ${{ env.CONTAINER_NAME }}"
          echo "🔧 Environment: ${{ github.ref_name }}"

      # ORACLE VPS DEPLOY
      - name: Deploy to Oracle VPS
        if: env.ORACLE_SSH_KEY != '' && env.ORACLE_HOST != ''
        env:
          SSH_PRIVATE_KEY: ${{ env.ORACLE_SSH_KEY }}
          CONTAINER_PORT: 3000
        run: |
          echo "🔑 Oracle VPS SSH bağlantısı hazırlanıyor..."
          USER="${ORACLE_USER:-ubuntu}"

          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$ORACLE_HOST" >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/deploy_key $USER@$ORACLE_HOST << EOF
            set -e
            echo "🧹 Docker cleanup"
            docker system prune -f

            IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            CONTAINER_PORT="$CONTAINER_PORT"

            echo "🐳 Pulling image: \$IMAGE_NAME"
            docker pull "\$IMAGE_NAME"

            echo "🛑 Stopping old container..."
            docker stop "\$CONTAINER_NAME" 2>/dev/null || true
            docker rm "\$CONTAINER_NAME" 2>/dev/null || true

            echo "🚀 Starting new container..."
            docker run -d \
              --name "\$CONTAINER_NAME" \
              --restart unless-stopped \
              -p "\$CONTAINER_PORT":3000 \
              -e TZ=UTC \
              -e CONTAINER_NAME="\$CONTAINER_NAME" \
              -e DEPLOY_ENV="${{ github.ref_name }}" \
              "\$IMAGE_NAME"

            echo "✅ Oracle Deployment Completed at: http://$ORACLE_HOST:\$CONTAINER_PORT"
          EOF

      # RENDER DEPLOY
      - name: Deploy to Render
        if: env.RENDER_DEPLOY_HOOK != ''
        run: |
          echo "🚀 Triggering Render deployment..."
          curl -s -X POST "${{ env.RENDER_DEPLOY_HOOK }}"
          echo "✅ Render deployment triggered"

      # HETZNER VPS DEPLOY
      - name: Deploy to Hetzner VPS
        if: env.HETZNER_SSH_KEY != '' && env.HETZNER_HOST != ''
        env:
          SSH_PRIVATE_KEY: ${{ env.HETZNER_SSH_KEY }}
          CONTAINER_PORT: 3000
        run: |
          echo "🔑 Hetzner VPS SSH bağlantısı hazırlanıyor..."
          USER="${HETZNER_USER:-root}"

          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$HETZNER_HOST" >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/deploy_key $USER@$HETZNER_HOST << EOF
            set -e
            echo "🧹 Docker cleanup"
            docker system prune -f

            IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            CONTAINER_PORT="$CONTAINER_PORT"

            echo "🐳 Pulling image: \$IMAGE_NAME"
            docker pull "\$IMAGE_NAME"

            echo "🛑 Stopping old container..."
            docker stop "\$CONTAINER_NAME" 2>/dev/null || true
            docker rm "\$CONTAINER_NAME" 2>/dev/null || true

            echo "🚀 Starting new container..."
            docker run -d \
              --name "\$CONTAINER_NAME" \
              --restart unless-stopped \
              -p "\$CONTAINER_PORT":3000 \
              -e TZ=UTC \
              -e CONTAINER_NAME="\$CONTAINER_NAME" \
              -e DEPLOY_ENV="${{ github.ref_name }}" \
              "\$IMAGE_NAME"

            echo "✅ Hetzner Deployment Completed at: http://$HETZNER_HOST:\$CONTAINER_PORT"
          EOF
