--SON HALİ---
* buy/hodl/sel sinyali
* BTC yada btc yazıldığında sonuç üretsin
* raporlar usdt paritesine göre olsun, USDT göstermesin
*

Komut	Parametre	Anlam / Amaç	Açıklama
/t	(boş)	Genel görünüm (default)	default coin’in özet analizi
/t <n>	örn: /t 20	Hacimli ilk n coin	Hacimli ilk n coin’in piyasa genel görünümü
/t <sembol>	örn: /t bnb	Tek coin analizi	Belirtilen coin’in detaylı kompozit analizi
/tt	(boş)	Top Scan (default sayıda)	Varsayılan sayıda  en iyi alım fırsatlarını gösterir
/tt <n>	örn: /tt 10	Top Scan n adet	n tane  en iyi alım fırsatlarını gösterir
/tv
/tm	(boş)	Market Health	Genel piyasa sağlığı (MMI, ADI, SSP)
/tp	(boş)	Top Performers	default sayıda En yüksek alım potansiyeline sahip coinler
/tp <n>	/tp 20	Top Performers	20 tane En yüksek alım potansiyeline sahip coinler
/tf	(boş)	Capital Flow	Coin’lere giren/çıkan sermaye yönü (inflow/outflow)
/tf <sembol>	örn: /tf btc	Capital Flow	belirtilen Coin’lere giren/çıkan sermaye yönü (inflow/outflow)
/ta	(boş)	Anomaly / Alert Map	Piyasadaki fırsat ve anomalileri gösterir


+
🎯 **KULLANIM SENARYOLARI:
/tv Kullanacağın Zaman:
"Piyasa genel olarak nasıl?"
"Hangi coin'ler şu anda popüler?"
"Market sentiment nedir?"
"Farklı coin'leri karşılaştırmak istiyorum"

/tt Kullanacağın Zaman:
"Hemen alım yapmak istiyorum, en iyi fırsatlar neler?"
"Sadece alım sinyali veren coin'leri görmek istiyorum"
"Portföyüme eklemek için coin arıyorum"
---



revize---
*****
📊 Market Scan (4h, mode=config)
<SYMBOL>: α={score}| <regime_label> (<regime_score>) <kalman_arrow> corr=<correlation>

örnek
📊 Market Scan (4h, mode=config)
BTC: α=0.13 range(0.03) ↓ corr=1.0
ARPA: α=0.12  range (0.31) ↑ corr=0.27






Kodunuz bir Telegram bot komutu (`/t`) için teknik analiz (TA) işlevi görüyor ve iki temel rapor türü üretiyor. Bu raporlar, kripto para piyasası taraması ve belirli bir coin analizine dair verileri içeriyor.

Aşağıda bu **rapor formatlarını** iki başlık altında detaylandırıyorum:

---

## 📌 1. **Market Scan Rapor Formatı** (`/t`, `/t all`, `/t 10` gibi)

Bu mod, ya config’teki sembolleri tarar, ya en yüksek hacimli coin'leri (`topN`), ya da tüm USDT paritelerini.

### 📝 Format:

```
📊 Market Scan (4h, mode={mode})
<SYMBOL>: α={score} [<SIGNAL>] | Rejim={regime_label}
```

### 🔸 Örnek:

```
📊 Market Scan (4h, mode=top10)
BTCUSDT: α=0.64 [LONG] | Rejim=trend
ETHUSDT: α=-0.48 [FLAT] | Rejim=range
XRPUSDT: α=-0.92 [SHORT] | Rejim=crash
```

### 🧩 Açıklamalar:

* `α`: Alpha skoru, teknik analiz sonucu çıkan sinyalin kuvveti.
* `[LONG | SHORT | FLAT]`: Pozisyon önerisi (al/sat/bekle).
* `Rejim`: Piyasa durumu ("trend", "range", "crash").

---

## 📌 2. **Tek Coin Analiz Raporu** (`/t BTC`, `/t ETH 8` gibi)

Belirli bir coin için detaylı analiz sonucu verir. BTC ile kıyaslamalı `lead-lag`, `entropy`, `kalman trendi` gibi gelişmiş veriler içerir.

### 📝 Format:

```
🔍 <COIN> (<hours>h)
α_skor: <score> → <SIGNAL>
Rejim: <regime_label> (<regime_score>)
Entropy: <entropy_score>
Kalman eğilim: <kalman_arrow>
Lead–Lag (BTC): <lag> bar | corr=<correlation>
```

### 🔸 Örnek:

```
🔍 SOLUSDT (6h)
α_skor: 0.87 → LONG
Rejim: trend (0.72)
Entropy: 0.41
Kalman eğilim: ↑
Lead–Lag (BTC): 3 bar | corr=0.78
```

### 🧩 Açıklamalar:

* `α_skor`: Teknik analiz sinyal gücü.
* `Rejim`: Trend tanımlayıcı skor ve etiketi.
* `Entropy`: Belirsizlik ölçüsü.
* `Kalman eğilim`: Fiyat eğilimi (↑, ↓, →).
* `Lead–Lag`: BTC'ye göre gecikme (kaç bar), korelasyon değeri.

---

## 🎯 Hangi Komut Ne Yapar?

| Komut      | Açıklama                               |
| ---------- | -------------------------------------- |
| `/t`       | Config içindeki coin'leri tarar        |
| `/t all`   | Tüm USDT çiftlerini tarar              |
| `/t 10`    | Hacme göre ilk 10 coini tarar          |
| `/t BTC`   | Sadece BTC analizi (varsayılan 4 saat) |
| `/t ETH 8` | ETH analizi, son 8 saatlik veri ile    |


---
---
---
---
---
Özet: Trend → Risk → Volatility → Sentiment sırasıyla öncelikli. Regime classification en kritik! 
2. KRİTİK METRİK GRUPLARI
A. TREND & MOMENTUM (En Önemli)
Trend_Strength_Composite → Ana trend yönü
Momentum_Composite → Hareket gücü
Market_Regime → Pazar rejimi

B. RISK & VOLATILITY
Volatility_Composite → Oynaklık seviyesi
Risk_Composite → Risk durumu
Max_Drawdown → Maksimum düşüş

C. SENTIMENT & ON-CHAIN
Funding_Rate → Türev piyasa sentiment
OI_Change_Rate → Pozisyon değişimi
exchange_netflow → Borsa akışları

örnek:
# Örnek çıktı:
coin       trend    momentum  vola    risk    sentiment  regime        score
BTC        ↗ 0.72   ↗ 0.68    ↗ 0.45  ↗ 0.38  ↘ -0.22   BULL_HIGH_VOL  ↗ 0.40
ETH        ↗ 0.64   → 0.52    ↗ 0.51  ↗ 0.41   → 0.08   BULL_MED_VOL   ↗ 0.43
BNB        → 0.31   ↘ -0.18   ↗ 0.62  ↗ 0.55  ↘ -0.35   NEUTRAL_HIGH_VOL → 0.19

# Alarm Metrikleri:
coin       liq_risk   vol_spike  sentiment  regime_change
BTC        ↗ 0.68     ↗ 0.82     ↘ -0.45    ⚠️ HIGH_VOL
ETH        → 0.41     ↗ 0.71     → 0.12     ✅ STABLE
BNB        ↗ 0.75     ↗ 0.88     ↘ -0.62    🔥 BEAR_HIGH_VOL


# Örnek: BTC Pozisyon Analizi
BTC Metrics:
trend: ↗ 0.72 (GÜÇLÜ BULL)
momentum: ↗ 0.68 (YUKARI)
volatility: ↗ 0.45 (ORTA)
risk: ↗ 0.38 (DÜŞÜK RİSK)  
sentiment: ↘ -0.22 (HAFİF BEAR)
regime: BULL_HIGH_VOL

📍 POZİSYON: STRONG BUY ✅
---
---
---


## ✅ performans test--

@router.message(Command("agg_status"))
async def cmd_agg_status(message: Message):
    """
    /agg_status
    -> Aggregator'ın health & performance bilgilerini döner.
    """
    agg: AnalysisAggregator = await get_aggregator()
    try:
        healthy, details = await agg.comprehensive_health_check()
        perf = agg.get_performance_metrics()
        lines = [f"✅ Aggregator health: {'OK' if healthy else 'PROBLEM'}"]
        for k, v in details.items():
            lines.append(f"• {k}: {v}")
        lines.append("Performance:")
        lines.append(f"• total_executions: {perf.get('total_executions')}")
        lines.append(f"• avg_exec_time: {perf.get('average_execution_time'):.3f}s")
        lines.append(f"• cache_hits: {perf.get('cache_hits')}  cache_misses: {perf.get('cache_misses')}")
        await message.answer("\n".join(lines))
    except Exception as e:
        logger.exception("agg_status error: %s", e)
        await message.answer(f"❌ Aggregator status alınamadı: {e}")

# Extra: simple ping command in this router (useful for health checks)
@router.message(Command("analysis_ping"))
async def cmd_ping(message: Message):
    await message.answer("pong — analysis handler alive ✅")



